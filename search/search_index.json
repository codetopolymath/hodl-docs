{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to HODL Project Documentation","text":"<p>Welcome to the comprehensive documentation for the HODL project. This guide covers all aspects of our blockchain-based staking and NFT platform, including backend systems, frontend applications, and smart contract integrations.</p>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>New to HODL? Get up and running quickly:</p> <ul> <li>Project Overview - Understand what HODL is all about</li> <li>Installation Guide - Set up your development environment</li> <li>Configuration - Configure the project for your needs</li> </ul>"},{"location":"#core-documentation","title":"\ud83d\udcda Core Documentation","text":"<p>Dive deep into different aspects of the HODL project:</p>"},{"location":"#backend","title":"Backend","text":"<p>Our Django-powered backend handles data management, API services, and blockchain interactions.</p> <ul> <li>Backend Overview</li> <li>Models - Data structures and relationships</li> <li>APIs - RESTful services for frontend and third-party integrations</li> <li>Management Commands - Custom Django commands for maintenance tasks</li> </ul>"},{"location":"#frontend","title":"Frontend","text":"<p>The React-based frontend provides a seamless user experience for interacting with the HODL platform.</p> <ul> <li>Frontend Overview</li> <li>Pages - Main application views</li> <li>Components - Reusable UI elements</li> <li>State Management - How we handle application state</li> </ul>"},{"location":"#blockchain-integration","title":"Blockchain Integration","text":"<p>Learn about our smart contract ecosystem and how we integrate with blockchain technology.</p> <ul> <li>Blockchain Overview</li> <li>Smart Contracts - Ethereum-based contracts for tokens, NFTs, and more</li> <li>Web3 Integration - How our frontend interacts with the blockchain</li> </ul>"},{"location":"#developer-resources","title":"\ud83d\udc69\u200d\ud83d\udcbb Developer Resources","text":"<p>Resources to help you contribute to or extend the HODL project:</p> <ul> <li>Development Setup</li> <li>Backend Development Guide</li> <li>Frontend Development Guide</li> <li>Smart Contract Development</li> </ul>"},{"location":"#deployment","title":"\ud83d\ude80 Deployment","text":"<p>Learn how to deploy the HODL project to production environments:</p> <ul> <li>Deployment Overview</li> <li>Backend Deployment</li> <li>Frontend Deployment</li> <li>Smart Contract Deployment</li> </ul>"},{"location":"#need-help","title":"\ud83c\udd98 Need Help?","text":"<ul> <li>Check out our Troubleshooting Guide for solutions to common issues</li> <li>Visit the FAQ for answers to frequently asked questions</li> <li>Contact Support if you need further assistance</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>We welcome contributions from the community! Learn how you can contribute:</p> <ul> <li>Contribution Guidelines</li> <li>Code of Conduct</li> </ul>"},{"location":"#license","title":"\ud83d\udcdc License","text":"<p>The HODL project is licensed under the MIT License.</p> <ul> <li> <p> Quick Start</p> <p>Get up and running with HODL in no time.</p> <p> Getting started</p> </li> <li> <p> Backend Guide</p> <p>Dive into the Django-powered backend of HODL.</p> <p> Backend docs</p> </li> <li> <p> Frontend Guide</p> <p>Explore our React-based user interface.</p> <p> Frontend docs</p> </li> <li> <p> Blockchain Integration</p> <p>Learn about our smart contract ecosystem.</p> <p> Blockchain docs</p> </li> </ul>"},{"location":"backend/overview/","title":"Backend Project Overview \ud83d\udda5\ufe0f","text":""},{"location":"backend/overview/#project-structure","title":"Project Structure \ud83c\udfd7\ufe0f","text":"<p>The backend of the HODL project is built using Django, a high-level Python web framework. Here's an overview of the project structure:</p> <pre><code>graph TD\n    A[Root] --&gt; B[README.md]\n    A --&gt; C[akita]\n    A --&gt; D[config]\n    A --&gt; E[data-files]\n    A --&gt; F[incufi]\n    A --&gt; G[liquidity]\n    A --&gt; H[manage.py]\n    A --&gt; I[middleware]\n    A --&gt; J[user]\n    A --&gt; K[Other Files]\n\n    C --&gt; C1[Models &amp; APIs]\n    C --&gt; C2[Management Commands]\n    C --&gt; C3[Migrations]\n\n    D --&gt; D1[Settings &amp; URLs]\n\n    F --&gt; F1[Models &amp; APIs]\n    F --&gt; F2[Management Commands]\n    F --&gt; F3[Migrations]\n\n    G --&gt; G1[Models &amp; APIs]\n    G --&gt; G2[Migrations]\n\n    J --&gt; J1[Models &amp; APIs]\n    J --&gt; J2[Management Commands]\n    J --&gt; J3[Migrations]\n\n    K --&gt; K1[bashscript.sh]\n    K --&gt; K2[requirements.txt]\n    K --&gt; K3[production_backup.sql]</code></pre>"},{"location":"backend/overview/#key-components","title":"Key Components \ud83d\udd11","text":""},{"location":"backend/overview/#1-django-apps","title":"1. Django Apps","text":""},{"location":"backend/overview/#11-akita-app","title":"1.1 Akita App","text":"<ul> <li>Purpose: Manages NFT-related functionalities</li> <li>Key Files:</li> <li><code>models.py</code>: Defines NFT, Price models</li> <li><code>apis.py</code>: API endpoints for NFT operations</li> <li><code>management/commands/</code>: Custom management commands<ul> <li><code>distribute_commission.py</code></li> <li><code>distribute_gift.py</code></li> <li><code>import_nfts.py</code></li> </ul> </li> </ul>"},{"location":"backend/overview/#12-incufi-app","title":"1.2 Incufi App","text":"<ul> <li>Purpose: Handles staking and commission operations</li> <li>Key Files:</li> <li><code>models.py</code>: Defines Stake, Commission models</li> <li><code>apis.py</code>: API endpoints for staking operations</li> <li><code>management/commands/</code>:<ul> <li><code>convert_stake_to_nft.py</code></li> <li><code>double_earning.py</code></li> <li><code>import_bonus.py</code></li> <li><code>import_stakes.py</code></li> </ul> </li> </ul>"},{"location":"backend/overview/#13-liquidity-app","title":"1.3 Liquidity App","text":"<ul> <li>Purpose: Manages liquidity-related functionalities</li> <li>Key Files:</li> <li><code>models.py</code>: Defines liquidity models</li> <li><code>apis.py</code>: API endpoints for liquidity operations</li> <li><code>utils.py</code>: Utility functions for liquidity calculations</li> </ul>"},{"location":"backend/overview/#14-user-app","title":"1.4 User App","text":"<ul> <li>Purpose: Handles user management and authentication</li> <li>Key Files:</li> <li><code>models.py</code>: Defines custom User model and UserProfile</li> <li><code>apis.py</code>: API endpoints for user operations</li> <li><code>management/commands/</code>:<ul> <li><code>backup_db.py</code></li> <li><code>change_parent.py</code></li> <li><code>import_users.py</code></li> </ul> </li> </ul>"},{"location":"backend/overview/#2-configuration","title":"2. Configuration","text":"<p>The <code>config</code> directory contains project-wide settings: - <code>settings.py</code>: Django project settings - <code>urls.py</code>: Main URL routing configuration</p>"},{"location":"backend/overview/#3-middleware","title":"3. Middleware","text":"<p>Custom middleware in <code>middleware/restrict_ip.py</code> for IP restriction functionality.</p>"},{"location":"backend/overview/#4-data-files","title":"4. Data Files","text":"<p>The <code>data-files</code> directory contains various CSV files, likely used for data import operations: - NFT data - Gift distribution data - User data - Stake data</p>"},{"location":"backend/overview/#5-management-commands","title":"5. Management Commands","text":"<p>Each app has its own set of management commands for various operations: - Distributing commissions and gifts - Importing NFTs, stakes, and users - Converting stakes to NFTs - Database backup</p>"},{"location":"backend/overview/#6-database-migrations","title":"6. Database Migrations","text":"<p>Each app contains its own migrations directory to manage database schema changes over time.</p>"},{"location":"backend/overview/#key-features","title":"Key Features \ud83c\udf1f","text":"<ol> <li>NFT Management: Creation, distribution, and tracking of NFTs</li> <li>Staking System: User staking functionality with rewards</li> <li>Commission Distribution: Automated commission calculation and distribution</li> <li>Liquidity Operations: Managing liquidity pools and related calculations</li> <li>User Management: Custom user model with profiles and authentication</li> <li>Data Import/Export: Various commands for importing and exporting data</li> <li>Database Backup: Automated database backup functionality</li> </ol>"},{"location":"backend/overview/#tech-stack","title":"Tech Stack \ud83d\udee0\ufe0f","text":"<ul> <li>Framework: Django (Python)</li> <li>Database: PostgreSQL (inferred from production backup file)</li> <li>API: Django Rest Framework (inferred from <code>apis.py</code> files)</li> <li>Task Scheduling: Likely uses Celery or Django's built-in cron (inferred from management commands)</li> </ul>"},{"location":"backend/overview/#getting-started","title":"Getting Started \ud83d\ude80","text":"<ol> <li>Clone the repository</li> <li>Install dependencies:    <pre><code>pip install -r requirements.txt\n</code></pre></li> <li>Set up the database:    <pre><code>python manage.py migrate\n</code></pre></li> <li>Run the development server:    <pre><code>python manage.py runserver\n</code></pre></li> </ol> <p>\ud83d\udcd8 Note: Make sure to configure your environment variables and database settings before running the project.</p>"},{"location":"backend/overview/#best-practices-checklist","title":"Best Practices Checklist \u2705","text":"<ul> <li> Use virtual environments for development</li> <li> Keep <code>requirements.txt</code> updated</li> <li> Run tests before committing changes</li> <li> Follow PEP 8 style guide for Python code</li> <li> Document new API endpoints and models</li> <li> Use Django's ORM for database operations</li> <li> Regularly backup production data</li> </ul>"},{"location":"backend/overview/#need-help","title":"Need Help? \ud83c\udd98","text":"<ul> <li>\ud83d\udcda Refer to the project's <code>README.md</code> for detailed setup instructions</li> <li>\ud83d\udc65 Contact the backend team lead for access issues or architectural questions</li> <li>\ud83d\udcac Use the project's issue tracker for bug reports and feature requests</li> </ul>"},{"location":"blockchain/overview/","title":"Comprehensive Guide to Smart Contracts","text":""},{"location":"blockchain/overview/#table-of-contents","title":"Table of Contents","text":"<ol> <li> <p>Introduction to Smart Contracts</p> </li> <li> <p>Creating a Smart Contract</p> </li> <li> <p>Smart Contract Storage</p> </li> <li> <p>Gas and Its Importance</p> </li> <li> <p>Immutability in Smart Contracts</p> </li> <li> <p>Upgradeable Contracts</p> </li> <li> <p>Best Practices and Considerations</p> </li> </ol>"},{"location":"blockchain/overview/#1-introduction-to-smart-contracts","title":"1. Introduction to Smart Contracts","text":"<p>Smart contracts are self-executing contracts with the terms of the agreement directly written into code. They run on blockchain networks, primarily Ethereum, and automatically execute when predetermined conditions are met.</p> <p>Key features:</p> <ul> <li> <p>Autonomy: Once deployed, they operate independently.</p> </li> <li> <p>Transparency: All transactions are visible on the blockchain.</p> </li> <li> <p>Speed and Efficiency: Automated processes reduce the need for intermediaries.</p> </li> <li> <p>Security: Cryptographic principles ensure the integrity of transactions.</p> </li> </ul>"},{"location":"blockchain/overview/#2-creating-a-smart-contract","title":"2. Creating a Smart Contract","text":"<p>Let's start with a simple example of a smart contract written in Solidity:</p> <pre><code>// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract SimpleStorage {\n    uint256 private value;\n\n    event ValueChanged(uint256 newValue);\n\n    function setValue(uint256 _newValue) public {\n        value = _newValue;\n        emit ValueChanged(_newValue);\n    }\n\n    function getValue() public view returns (uint256) {\n        return value;\n    }\n}\n</code></pre> <p>This contract allows storing and retrieving a single unsigned integer value.</p> <p>Steps to create and deploy: 1. Write the contract code (as above). 2. Compile the contract using a Solidity compiler. 3. Deploy the compiled contract to a blockchain network.</p> <p>Deployment can be done using tools like Truffle, Hardhat, or Remix IDE.</p>"},{"location":"blockchain/overview/#3-smart-contract-storage","title":"3. Smart Contract Storage","text":"<p>When you deploy a smart contract, its code and state are stored on the blockchain. Each contract has its own storage space.</p> <p>Storage types: 1. State Variables: Permanently stored in contract storage. 2. Memory: Temporary storage that lasts only for the duration of a function call. 3. Stack: Holds small local variables. 4. Calldata: Read-only area where function arguments are stored.</p> <p>Example of different storage types:</p> <pre><code>contract StorageExample {\n    uint256 stateVariable;  // Stored on the blockchain\n\n    function exampleFunction(uint256 _argument) public {\n        uint256 memoryVar = _argument * 2;  // Stored in memory\n        stateVariable = memoryVar;  // Updates state variable\n    }\n}\n</code></pre> <p>The blockchain's state is typically represented as a Merkle Patricia Trie, allowing for efficient proofs and updates.</p>"},{"location":"blockchain/overview/#4-gas-and-its-importance","title":"4. Gas and Its Importance","text":"<p>Gas is a measure of computational effort required to execute operations on the Ethereum network.</p> <p>Key points: - Each operation in Ethereum has a fixed gas cost. - Users specify a gas price (in Ether) they're willing to pay per unit of gas. - Total transaction fee = Gas Used * Gas Price</p> <p>Example: <pre><code>contract GasExample {\n    uint256[] public numbers;\n\n    // This function will use more gas as the array grows\n    function addNumber(uint256 _number) public {\n        numbers.push(_number);\n    }\n\n    // This function uses a fixed amount of gas\n    function getNumber(uint256 _index) public view returns (uint256) {\n        return numbers[_index];\n    }\n}\n</code></pre></p> <p>In this example, <code>addNumber</code> will cost more gas as the <code>numbers</code> array grows, while <code>getNumber</code> will have a consistent gas cost.</p>"},{"location":"blockchain/overview/#5-immutability-in-smart-contracts","title":"5. Immutability in Smart Contracts","text":"<p>Once deployed, a smart contract's code cannot be changed. This immutability is ensured by:</p> <ol> <li>Blockchain's append-only nature.</li> <li>Contract addresses being deterministically generated.</li> <li>Lack of built-in update mechanisms in Solidity.</li> </ol> <p>Example of an immutable contract:</p> <pre><code>contract ImmutableContract {\n    uint256 public constant UNCHANGEABLE_NUMBER = 42;\n    address public immutable OWNER;\n\n    constructor() {\n        OWNER = msg.sender;\n    }\n\n    function someFunction() public view returns (string memory) {\n        return \"This function's code cannot be changed after deployment\";\n    }\n}\n</code></pre>"},{"location":"blockchain/overview/#6-upgradeable-contracts","title":"6. Upgradeable Contracts","text":"<p>While contracts are immutable by default, patterns have been developed to allow upgrades:</p> <ol> <li>Proxy Pattern: Uses a proxy contract to delegate calls to an implementation contract.</li> </ol> <p>Here's a simplified example:</p> <pre><code>contract Proxy {\n    address public implementation;\n    address public owner;\n\n    constructor(address _implementation) {\n        implementation = _implementation;\n        owner = msg.sender;\n    }\n\n    function upgrade(address _newImplementation) external {\n        require(msg.sender == owner, \"Only owner can upgrade\");\n        implementation = _newImplementation;\n    }\n\n    fallback() external payable {\n        address _impl = implementation;\n        assembly {\n            let ptr := mload(0x40)\n            calldatacopy(ptr, 0, calldatasize())\n            let result := delegatecall(gas(), _impl, ptr, calldatasize(), 0, 0)\n            let size := returndatasize()\n            returndatacopy(ptr, 0, size)\n            switch result\n            case 0 { revert(ptr, size) }\n            default { return(ptr, size) }\n        }\n    }\n}\n\ncontract ImplementationV1 {\n    uint256 public value;\n\n    function setValue(uint256 _value) public {\n        value = _value;\n    }\n}\n\ncontract ImplementationV2 {\n    uint256 public value;\n\n    function setValue(uint256 _value) public {\n        value = _value * 2;  // New logic\n    }\n\n    function resetValue() public {\n        value = 0;  // New function\n    }\n}\n</code></pre> <p>In this example, the <code>Proxy</code> contract can be upgraded to point to a new implementation, allowing the logic to be changed without losing the contract's state or address.</p>"},{"location":"blockchain/overview/#7-best-practices-and-considerations","title":"7. Best Practices and Considerations","text":"<ol> <li>Security:</li> <li>Always conduct thorough testing and audits.</li> <li>Use established libraries like OpenZeppelin for common patterns.</li> <li> <p>Be aware of common vulnerabilities (e.g., reentrancy, overflow/underflow).</p> </li> <li> <p>Gas Optimization:</p> </li> <li>Minimize on-chain storage.</li> <li>Batch operations when possible.</li> <li> <p>Use appropriate data types (e.g., <code>uint8</code> instead of <code>uint256</code> for small numbers).</p> </li> <li> <p>Upgradeable Contracts:</p> </li> <li>Use initialization functions instead of constructors.</li> <li>Be cautious of storage collisions when upgrading.</li> <li> <p>Implement access controls for upgrade functionality.</p> </li> <li> <p>General:</p> </li> <li>Comment your code extensively.</li> <li>Use events for important state changes.</li> <li>Plan for failure scenarios and include appropriate checks.</li> </ol> <p>Example of a contract incorporating some best practices:</p> <pre><code>// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\ncontract BestPracticesExample is Ownable, ReentrancyGuard {\n    uint256 private _value;\n\n    event ValueChanged(uint256 newValue);\n\n    function setValue(uint256 newValue) public onlyOwner {\n        require(newValue != _value, \"New value must be different\");\n        _value = newValue;\n        emit ValueChanged(newValue);\n    }\n\n    function getValue() public view returns (uint256) {\n        return _value;\n    }\n\n    function withdrawFunds() public onlyOwner nonReentrant {\n        uint256 balance = address(this).balance;\n        require(balance &gt; 0, \"No funds to withdraw\");\n        (bool success, ) = owner().call{value: balance}(\"\");\n        require(success, \"Transfer failed\");\n    }\n\n    // Fallback function\n    receive() external payable {\n        // Custom logic for receiving Ether\n    }\n}\n</code></pre> <p>This contract demonstrates ownership control, reentrancy protection, event emission, and proper use of modifiers and requirements.</p> <p>By understanding these concepts and following best practices, developers can create secure, efficient, and maintainable smart contracts.</p>"},{"location":"frontend/overview/","title":"Frontend Overview \ud83d\udda5\ufe0f","text":"<p>Welcome to the frontend documentation of the HODL Project! This overview will help you understand the structure and components of our frontend application.</p>"},{"location":"frontend/overview/#project-structure","title":"Project Structure \ud83c\udfd7\ufe0f","text":"<p>Our frontend is built using Next.js, a React framework that enables server-side rendering and generating static websites. Here's a high-level overview of our project structure:</p> <pre><code>graph TD\n    A[app] --&gt; B[pages]\n    A --&gt; C[core]\n    C --&gt; D[abi]\n    C --&gt; E[context]\n    C --&gt; F[localization]\n    C --&gt; G[ui]\n    C --&gt; H[utils]\n    G --&gt; I[components]\n    G --&gt; J[layout]</code></pre>"},{"location":"frontend/overview/#pages","title":"Pages \ud83d\udcc4","text":"<p>Our application consists of several key pages, each serving a specific purpose:</p> Page Description Location Dashboard Main user interface showing key metrics and actions <code>/app/dashboard/page.tsx</code> My NFTs Displays user's owned NFTs and related information <code>/app/my-nfts/page.tsx</code> Stake Interface for staking tokens <code>/app/stake/page.tsx</code> Swap Token swapping functionality <code>/app/swap/page.tsx</code> Team Shows user's team structure and referrals <code>/app/team/page.tsx</code> Bonus Displays user's bonus information <code>/app/bonus/page.tsx</code> Complete Profile Form for users to complete their profile information <code>/app/complete-profile/page.tsx</code> Register User registration page <code>/app/register/page.tsx</code> Projects Overview of available or ongoing projects <code>/app/projects/page.tsx</code> Withdraw History Shows user's withdrawal history <code>/app/withdraw-history/page.tsx</code>"},{"location":"frontend/overview/#core-components","title":"Core Components \ud83e\uddf1","text":"<p>The <code>core</code> directory contains essential utilities and configurations:</p> <ul> <li>abi: Contains ABI (Application Binary Interface) files for smart contract interaction.</li> <li>context: Manages application-wide state and configurations.</li> <li>localization: Handles multi-language support.</li> <li>ui: Contains reusable UI components and layouts.</li> <li>utils: Utility functions and helpers.</li> </ul>"},{"location":"frontend/overview/#key-features","title":"Key Features \u2728","text":"<ol> <li>Responsive Design: Our UI adapts to various screen sizes for optimal user experience.</li> <li>Localization: Support for multiple languages (English and Korean).</li> <li>Web3 Integration: Seamless interaction with blockchain functionalities.</li> <li>State Management: Efficient state management using React context.</li> </ol>"},{"location":"frontend/overview/#getting-started","title":"Getting Started \ud83d\ude80","text":"<p>To set up the frontend development environment:</p> <ol> <li>Clone the repository</li> <li>Install dependencies:    <pre><code>npm install\n</code></pre></li> <li>Run the development server:    <pre><code>npm run dev\n</code></pre></li> <li>Open http://localhost:3000 in your browser</li> </ol>"},{"location":"frontend/overview/#need-help","title":"Need Help? \ud83c\udd98","text":"<p>If you encounter any issues or have questions:</p> <ul> <li>Check our Troubleshooting Guide</li> <li>Refer to the FAQ</li> <li>Contact our development team at support@hodlproject.com</li> </ul> <p>Happy coding! \ud83c\udf89</p>"},{"location":"frontend/project-structure/","title":"Frontend Project Structure \ud83c\udfd7\ufe0f","text":""},{"location":"frontend/project-structure/#complete-project-tree","title":"Complete Project Tree \ud83c\udf33","text":"<pre><code>graph TD\n    A[Root] --&gt; B[README.md]\n    A --&gt; C[app]\n    A --&gt; D[core]\n    A --&gt; E[Configuration Files]\n    A --&gt; F[bashscript.sh]\n\n    C --&gt; G[bonus]\n    C --&gt; H[complete-profile]\n    C --&gt; I[dashboard]\n    C --&gt; J[my-nfts]\n    C --&gt; K[projects]\n    C --&gt; L[register]\n    C --&gt; M[stake]\n    C --&gt; N[swap]\n    C --&gt; O[team]\n    C --&gt; P[withdraw-history]\n    C --&gt; Q[favicon.ico]\n    C --&gt; R[global.css]\n    C --&gt; S[layout.tsx]\n    C --&gt; T[page.tsx]\n    C --&gt; U[signin.module.css]\n\n    D --&gt; V[abi]\n    D --&gt; W[context]\n    D --&gt; X[localization]\n    D --&gt; Y[ui]\n    D --&gt; Z[utils]\n\n    E --&gt; AA[next-env.d.ts]\n    E --&gt; AB[next.config.mjs]\n    E --&gt; AC[package-lock.json]\n    E --&gt; AD[package.json]\n    E --&gt; AE[tsconfig.json]\n    E --&gt; AF[tree.txt]\n\n    click C \"https://nextjs.org/docs/app\" \"Learn about Next.js app directory\"\n    click D \"https://react.dev/learn/passing-data-deeply-with-context\" \"Learn about React Context\"\n    click V \"https://docs.ethers.org/v5/api/utils/abi/\" \"Learn about Ethereum ABIs\"\n    click X \"https://react.i18next.com/\" \"Learn about i18next for React\"</code></pre>"},{"location":"frontend/project-structure/#key-components","title":"Key Components \ud83d\udd11","text":""},{"location":"frontend/project-structure/#1-root-directory-files","title":"1. Root Directory Files","text":"<ul> <li><code>README.md</code>: Project documentation</li> <li><code>bashscript.sh</code>: Shell script for automation tasks</li> </ul>"},{"location":"frontend/project-structure/#2-app-directory","title":"2. <code>app</code> Directory","text":"<p>Contains page components and global styles. Each subdirectory typically represents a route.</p> Component Purpose Associated Files <code>bonus</code> \ud83c\udf81 Bonus/rewards page <code>page.tsx</code> <code>complete-profile</code> \ud83d\udc64 Profile completion <code>page.tsx</code> <code>dashboard</code> \ud83d\udcca Main user dashboard <code>page.tsx</code>, <code>dashboard.module.css</code> <code>my-nfts</code> \ud83d\uddbc\ufe0f Display user's NFTs <code>page.tsx</code>, <code>my-nfts.module.css</code> <code>projects</code> \ud83d\udcc1 Projects overview <code>page.tsx</code>, <code>projects.module.css</code> <code>register</code> \ud83d\udcdd User registration <code>page.tsx</code>, <code>register.module.css</code> <code>stake</code> \ud83d\udcb0 Staking functionality <code>page.tsx</code>, <code>stake.module.css</code> <code>swap</code> \ud83d\udd04 Token swap interface <code>page.tsx</code>, <code>swap.module.css</code> <code>team</code> \ud83d\udc65 Team/referral info <code>page.tsx</code>, <code>team.module.css</code>, <code>referralTree.tsx</code> <code>withdraw-history</code> \ud83d\udcdc Withdrawal records <code>page.tsx</code>, <code>withdraw-history.module.css</code> <p>Global files: - <code>favicon.ico</code>: Site favicon - <code>global.css</code>: Global styles - <code>layout.tsx</code>: Root layout component - <code>page.tsx</code>: Root page component - <code>signin.module.css</code>: Styles for sign-in functionality</p>"},{"location":"frontend/project-structure/#3-core-directory","title":"3. <code>core</code> Directory","text":"<p>Houses essential utilities and configurations.</p>"},{"location":"frontend/project-structure/#31-abi-subdirectory","title":"3.1 <code>abi</code> Subdirectory","text":"<p>JSON files defining smart contract interfaces: <pre><code>ERC20_TOKEN.json\nincufi.json\nliquidity.json\nnft.json\nnft2.json\npurchase.json\nswap.json\n</code></pre></p>"},{"location":"frontend/project-structure/#32-context-subdirectory","title":"3.2 <code>context</code> Subdirectory","text":"<p>Manages app-wide state: - <code>loader.ts</code>: Loading state management - <code>web3modal.tsx</code>: Web3 connection modal</p>"},{"location":"frontend/project-structure/#33-localization-subdirectory","title":"3.3 <code>localization</code> Subdirectory","text":"<p>Handles internationalization:</p> <pre><code>graph LR\n    A[LocalizationProvider.tsx] --&gt; B[LocaleContext.tsx]\n    B --&gt; C[useLocalization.ts]\n    C --&gt; D[translations/en.json]\n    C --&gt; E[translations/ko.json]</code></pre>"},{"location":"frontend/project-structure/#34-ui-subdirectory","title":"3.4 <code>ui</code> Subdirectory","text":"<p>Reusable UI components:</p> <pre><code>graph TD\n    A[ui] --&gt; B[Header.tsx]\n    A --&gt; C[LanguagePicker.tsx]\n    A --&gt; D[SidebarV.tsx]\n    A --&gt; E[SidebardH.tsx]\n    A --&gt; F[components]\n    A --&gt; G[layout]\n    F --&gt; H[Navigation/NavigationSidebar.tsx]\n    F --&gt; I[UserProfile]\n    I --&gt; J[Profile/Profile.tsx]\n    I --&gt; K[ProfileBar/ProfileBar.tsx]\n    G --&gt; L[Layout.tsx]</code></pre>"},{"location":"frontend/project-structure/#35-utils-subdirectory","title":"3.5 <code>utils</code> Subdirectory","text":"<p>Utility functions: - <code>axiosClient.ts</code>: API calls - <code>constant.ts</code>: App constants - <code>contract.ts</code>: Smart contract interactions - <code>utils.ts</code>: General utilities</p>"},{"location":"frontend/project-structure/#4-configuration-files","title":"4. Configuration Files","text":"<ul> <li><code>next-env.d.ts</code>: TypeScript declarations for Next.js</li> <li><code>next.config.mjs</code>: Next.js configuration</li> <li><code>package-lock.json</code>: Locked dependencies</li> <li><code>package.json</code>: Project dependencies and scripts</li> <li><code>tsconfig.json</code>: TypeScript configuration</li> <li><code>tree.txt</code>: Project structure text file</li> </ul>"},{"location":"frontend/project-structure/#quick-start-guide","title":"Quick Start Guide \ud83d\ude80","text":"<ol> <li>Clone the repo</li> <li>Install dependencies:    <pre><code>npm install\n</code></pre></li> <li>Run development server:    <pre><code>npm run dev\n</code></pre></li> </ol> <p>\ud83d\udcd8 Tip: Use <code>npm run build</code> for production builds.</p>"},{"location":"frontend/project-structure/#best-practices-checklist","title":"Best Practices Checklist \u2705","text":"<ul> <li> Follow established folder structure for new features</li> <li> Use TypeScript for type safety</li> <li> Utilize core utilities and components</li> <li> Keep components modular and reusable</li> <li> Update translations when adding new text</li> <li> Test across different locales and devices</li> </ul>"},{"location":"frontend/project-structure/#need-help","title":"Need Help? \ud83c\udd98","text":"<ul> <li>\ud83d\udcda Troubleshooting Guide</li> <li>\ud83d\udc65 Contact frontend team lead</li> <li>\ud83d\udcac Post in project communication channel</li> </ul>"},{"location":"frontend/pages/dashboard/","title":"Dashboard Component Code-Level Documentation","text":""},{"location":"frontend/pages/dashboard/#component-overview","title":"Component Overview","text":"<p>The Dashboard component is a complex React component that displays various user statistics, staking information, and project history. It integrates with Web3 technologies and interacts with smart contracts.</p>"},{"location":"frontend/pages/dashboard/#import-statements","title":"Import Statements","text":"<pre><code>import React, { useEffect, useState } from \"react\";\nimport { useWeb3ModalAccount, useWeb3ModalProvider } from \"@web3modal/ethers/react\";\nimport { BigNumberish, formatEther, formatUnits, parseEther } from \"ethers\";\nimport { Area, AreaChart, ResponsiveContainer, XAxis } from \"recharts\";\n// ... other imports\n</code></pre> <ul> <li>The component uses React hooks for state management and side effects.</li> <li>Web3Modal hooks are used for blockchain interactions.</li> <li>Ethers.js is used for handling blockchain data types and conversions.</li> <li>Recharts is used for rendering the staking overview chart.</li> </ul>"},{"location":"frontend/pages/dashboard/#main-component-function","title":"Main Component Function","text":"<pre><code>export default function Dashboard() {\n  // ... component logic\n}\n</code></pre> <p>The Dashboard is exported as the default function component.</p>"},{"location":"frontend/pages/dashboard/#state-declarations","title":"State Declarations","text":"<pre><code>const [data, setData] = useState&lt;any&gt;();\nconst [chart, setChart] = useState&lt;any&gt;();\nconst [nftHistory, setNftHistory] = useState&lt;any[]&gt;([]);\nconst [hasUSDTAllowance, setHasUSDTAllowance] = useState(false);\n</code></pre> <ul> <li><code>data</code>: Stores the main dashboard data fetched from the API.</li> <li><code>chart</code>: Stores processed data for the staking overview chart.</li> <li><code>nftHistory</code>: Stores the user's NFT transaction history.</li> <li><code>hasUSDTAllowance</code>: Boolean flag indicating if the user has given USDT allowance for staking.</li> </ul>"},{"location":"frontend/pages/dashboard/#web3-hooks","title":"Web3 Hooks","text":"<pre><code>const { address, chainId } = useWeb3ModalAccount();\nconst { walletProvider } = useWeb3ModalProvider();\n</code></pre> <p>These hooks provide the user's wallet address, connected chain ID, and wallet provider for blockchain interactions.</p>"},{"location":"frontend/pages/dashboard/#data-fetching-functions","title":"Data Fetching Functions","text":""},{"location":"frontend/pages/dashboard/#getdata","title":"<code>getData()</code>","text":"<pre><code>const getData = async () =&gt; {\n  try {\n    const incufiContract = await getIncufiContract(walletProvider);\n    const t12 = await incufiContract?.commisionAmount(address);\n\n    const akitaDContract = await getAkitaDContract(walletProvider);\n    const t13 = await akitaDContract?.balanceOf(address);\n\n    const res = await axiosAuthClient.get(\"user/dashboard/\");\n    setData({\n      ...res.data,\n      totalCommission: Number(formatEther(t12)),\n      commissionBalance: Number(formatEther(t13)),\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\n</code></pre> <p>This function fetches dashboard data from both the blockchain (using smart contracts) and the backend API.</p>"},{"location":"frontend/pages/dashboard/#getnfthistory","title":"<code>getNftHistory()</code>","text":"<pre><code>const getNftHistory = async () =&gt; {\n  try {\n    const res = await axiosAuthClient.get(\"akita/nfts/\");\n    setNftHistory(res.data);\n  } catch (error) {\n    console.log(error);\n  }\n};\n</code></pre> <p>Fetches the user's NFT transaction history from the backend API.</p>"},{"location":"frontend/pages/dashboard/#useeffect-hooks","title":"useEffect Hooks","text":"<pre><code>useEffect(() =&gt; {\n  if (data) {\n    const temp = data?.stake_dates.map((date: any, index: number) =&gt; {\n      return { name: formatDate(date), value: data?.stake_amounts[index] };\n    });\n    setChart(temp);\n  }\n}, [data]);\n\nuseEffect(() =&gt; {\n  if (walletProvider &amp;&amp; chainId) getData();\n}, [walletProvider, chainId]);\n\nuseEffect(() =&gt; {\n  getNftHistory();\n}, []);\n\nuseEffect(() =&gt; {\n  if (walletProvider &amp;&amp; address) {\n    checkUSDTAllowance();\n  }\n}, [walletProvider, address, data]);\n</code></pre> <p>These effects handle: 1. Processing chart data when the main data is fetched. 2. Fetching dashboard data when the wallet is connected. 3. Fetching NFT history on component mount. 4. Checking USDT allowance when the wallet is connected or data changes.</p>"},{"location":"frontend/pages/dashboard/#blockchain-interaction-functions","title":"Blockchain Interaction Functions","text":""},{"location":"frontend/pages/dashboard/#withdrawcommission","title":"<code>withdrawCommission()</code>","text":"<pre><code>const withdrawCommission = async () =&gt; {\n  try {\n    const res = await axiosAuthClient.post(\"incufi/withdraw-commission/\");\n    Swal.fire({\n      title: \"Success\",\n      text: \"Withdraw request placed successfully\",\n      icon: \"success\",\n    }).then((res) =&gt; router.push(\"withdraw-history\"));\n  } catch (error: any) {\n    Swal.fire({\n      title: \"Error\",\n      text: `${error?.response.data[0]}`,\n      icon: \"error\",\n    });\n    console.log(error);\n  }\n};\n</code></pre> <p>Handles the commission withdrawal process, interacting with the backend API and providing user feedback.</p>"},{"location":"frontend/pages/dashboard/#stakefornft","title":"<code>stakeForNFT()</code>","text":"<pre><code>const stakeForNFT = async () =&gt; {\n  if (data?.stake_remaining == 0) {\n    Swal.fire({\n      title: \"Error\",\n      text: `You dont have any additional amount`,\n      icon: \"error\",\n    });\n    return;\n  }\n  if (hasUSDTAllowance) {\n    try {\n      const purchase = await getPurchaseContract(walletProvider);\n      const trans = await purchase?.Invest(\n        parseEther((100 - data?.stake_remaining).toString())\n      );\n      const receipt = await trans.wait();\n      const res = await axiosAuthClient.post(\"incufi/stake-remaining/\", {\n        amount: 100 - data?.stake_remaining,\n        transaction_hash: receipt.hash,\n        staking_duration: 90,\n      });\n      Swal.fire({\n        title: \"Success\",\n        text: \"Amount staked successfully\",\n        icon: \"success\",\n      });\n      window.location.reload();\n    } catch (error: any) {\n      console.log(error);\n      Swal.fire({\n        title: \"Error\",\n        text: `${error.reason}`,\n        icon: \"error\",\n      });\n    }\n  } else {\n    takeUSDTAllowance();\n  }\n};\n</code></pre> <p>Handles the staking process for NFT acquisition, including smart contract interaction and backend API calls.</p>"},{"location":"frontend/pages/dashboard/#subcomponents","title":"Subcomponents","text":""},{"location":"frontend/pages/dashboard/#statcard","title":"StatCard","text":"<pre><code>const StatCard = ({\n  title,\n  value,\n  unit,\n}: {\n  title: any;\n  value: any;\n  unit: any;\n}) =&gt; (\n  &lt;div className={`${styles.statCard} mb-3`}&gt;\n    &lt;h3&gt;{title}&lt;/h3&gt;\n    &lt;p className={styles.statValue}&gt;\n      {value} {unit}\n    &lt;/p&gt;\n  &lt;/div&gt;\n);\n</code></pre> <p>A reusable component for displaying individual statistic cards.</p>"},{"location":"frontend/pages/dashboard/#circularprogress","title":"CircularProgress","text":"<pre><code>const CircularProgress = ({\n  percentage,\n  size = 60,\n}: {\n  percentage: any;\n  size: any;\n}) =&gt; (\n  &lt;div\n    className={styles.circularProgress}\n    style={{ width: size, height: size }}\n  &gt;\n    {/* SVG implementation */}\n  &lt;/div&gt;\n);\n</code></pre> <p>A custom component for rendering circular progress indicators.</p>"},{"location":"frontend/pages/dashboard/#render-method","title":"Render Method","text":"<p>The render method of the Dashboard component is extensive, utilizing conditional rendering and mapping over data arrays to display various sections:</p> <ol> <li>Staking Overview Chart</li> <li>Statistic Cards</li> <li>Team Referrals</li> <li>Project History</li> </ol> <p>Each section is wrapped in appropriate CSS classes for styling and layout.</p>"},{"location":"frontend/pages/dashboard/#css-modules","title":"CSS Modules","text":"<p>The component uses CSS modules for styling, importing styles from <code>dashboard.module.css</code>:</p> <pre><code>import styles from \"./dashboard.module.css\";\n</code></pre> <p>This allows for scoped styling and prevents class name conflicts.</p>"},{"location":"frontend/pages/dashboard/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>The component uses <code>useEffect</code> hooks to manage side effects and prevent unnecessary re-renders.</li> <li>Conditional rendering is used to display data only when it's available.</li> <li>The staking chart uses <code>ResponsiveContainer</code> from Recharts for responsive rendering.</li> </ul>"},{"location":"frontend/pages/dashboard/#error-handling","title":"Error Handling","text":"<p>Error handling is implemented in data fetching functions and blockchain interactions, typically logging errors to the console and displaying user-friendly messages using SweetAlert2.</p>"},{"location":"frontend/pages/dashboard/#conclusion","title":"Conclusion","text":"<p>The Dashboard component is a complex piece of UI that integrates various data sources, blockchain interactions, and visualizations. It demonstrates advanced React patterns, Web3 integration, and responsive design principles.</p>"}]}